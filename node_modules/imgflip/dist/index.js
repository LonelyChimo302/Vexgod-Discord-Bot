import { pipeline } from 'node:stream/promises';
import fs from 'node:fs';
import got from 'got';

/** A class for querying the Imgflip API. */
class Imgflip {
  #username;
  #password;

  /**
   * @param options - The username and password to use when querying the API.
   */
  constructor({
    username,
    password
  }) {
    this.#username = username;
    this.#password = password;
  }

  // eslint-disable-next-line typescript/class-methods-use-this
  async memes() {
    return (await request(`get_memes`)).memes;
  }

  /**
   * Queries the Imgflip API to fill in the meme format with the given `id` with
   * the given captions and other options.
   *
   * Returns a promise that resolves to the URL of the filled in meme.
   */

  /**
   * Queries the Imgflip API to fill in the meme format with the given `id` with
   * the given captions and other options.
   *
   * Returns a promise that resolves when the filled in meme is downloaded to
   * `options.path`.
   */

  async meme(id, {
    captions,
    font,
    maxFontSize,
    ...rest
  }
  // eslint-disable-next-line typescript/no-invalid-void-type
  ) {
    const searchParams = {
      // eslint-disable-next-line camelcase
      template_id: id,
      username: this.#username,
      password: this.#password,
      ...captions.map((caption, i) => ({
        [`boxes[${i}][text]`]: caption
      })).reduce((acc, o) => Object.assign(acc, o), {})
    };
    if (font != null) {
      searchParams.font = font;
    }
    if (maxFontSize != null) {
      // eslint-disable-next-line camelcase
      searchParams.max_font_size = maxFontSize;
    }
    const url = (await request(`caption_image`, {
      method: `POST`,
      searchParams
    })).url;
    if (`path` in rest) {
      await pipeline(got.stream(url), fs.createWriteStream(rest.path));
    }
    return url;
  }
}
const request = async (path, options) => {
  const response = await got(path, {
    prefixUrl: `https://api.imgflip.com`,
    ...options
  }).json();
  if (response.success) {
    return response.data;
  }
  throw new Error(response.error_message);
};

export { Imgflip as default };
