/**
 * Calls the given `callback` function with the given `value`
 * and returns `value`. It resolves the `value` before
 * passing it to the callback in case it is a Promise.
 *
 * @param {*} value
 * @param {Function} callback
 *
 * @returns {*} value
 *
 * @example
 * const user = await tap(new User({ name: 'Supercharge' }), async user => {
 *   await user.save()
 *   await user.subscribeToNewsletter()
 * })
 */
export declare function tap<T>(value: Promise<T>, callback?: (value: T) => Promise<any>): Promise<T>;
export declare function tap<T>(value: Promise<T>, callback?: (value: T) => any): Promise<T>;
export declare function tap<T>(value: T, callback?: (value: T) => Promise<any>): Promise<T>;
export declare function tap<T>(value: T, callback?: (value: T) => any): T;
